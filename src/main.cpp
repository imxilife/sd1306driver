

//////////////////////////主程序////////////////////////////
/**
 *
 * 后续计划
 * 1. 完成SSD1306的显示初始化 【完成】
 * 2. 探索SSD1306显示数据模式 【完成】
 * 3. 完成在任意位置绘制一个点 【完成】
 * 4. 在任意位置绘制图形 包括但不限于矩形、圆角矩形、圆等几何图形 【开发中...】
 * 5. 在任意位置显示字符 中文和英文，包括文字的字体、大小、滚动方式等
 * 6. 研究取模软件的使用
 * 7. 研究Esp32的Wifi和蓝牙与外部设备的通信方式
 * 8. 研究手机端与Esp32模块的的通信，包括发送文字和图片等
 * 9. 研究Esp32如何驱动SD卡
 */

#include <Arduino.h>
#include <math.h>
#include "./lcd_driver/Ssd1306.h"
#include "./gui/Canvas.h"

int led = 2; // for test

int chatArr[36][16]{

    {0x00, 0x00, 0x10, 0x10, 0xF8, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x3F, 0x3F, 0x20, 0x20}, /*"1",0*/

    {0x00, 0x70, 0x78, 0x08, 0x08, 0x08, 0xF8, 0xF0, 0x00, 0x30, 0x38, 0x2C, 0x26, 0x23, 0x31, 0x30}, /*"2",1*/

    {0x00, 0x30, 0x38, 0x08, 0x08, 0x88, 0xF8, 0x70, 0x00, 0x18, 0x38, 0x21, 0x21, 0x23, 0x3E, 0x1C}, /*"3",2*/

    {0x00, 0x00, 0x80, 0xC0, 0x70, 0xF8, 0xF8, 0x00, 0x00, 0x06, 0x07, 0x25, 0x24, 0x3F, 0x3F, 0x24}, /*"4",3*/

    {0x00, 0xF8, 0xF8, 0x88, 0x88, 0x88, 0x08, 0x08, 0x00, 0x19, 0x39, 0x20, 0x20, 0x31, 0x1F, 0x0E}, /*"5",4*/

    {0x00, 0xE0, 0xF0, 0x98, 0x88, 0x98, 0x90, 0x00, 0x00, 0x0F, 0x1F, 0x31, 0x20, 0x20, 0x3F, 0x1F}, /*"6",5*/

    {0x00, 0x18, 0x18, 0x08, 0x88, 0xE8, 0x78, 0x18, 0x00, 0x00, 0x00, 0x3E, 0x3F, 0x01, 0x00, 0x00}, /*"7",6*/

    {0x00, 0x70, 0xF8, 0x88, 0x08, 0x88, 0xF8, 0x70, 0x00, 0x1C, 0x3E, 0x23, 0x21, 0x23, 0x3E, 0x1C}, /*"8",7*/

    {0x00, 0xF0, 0xF8, 0x08, 0x08, 0x18, 0xF0, 0xE0, 0x00, 0x01, 0x13, 0x32, 0x22, 0x33, 0x1F, 0x0F}, /*"9",8*/

    {0x00, 0xE0, 0xF0, 0x18, 0x08, 0x18, 0xF0, 0xE0, 0x00, 0x0F, 0x1F, 0x30, 0x20, 0x30, 0x1F, 0x0F}, /*"0",9*/

    {0x00, 0x00, 0xC0, 0xF8, 0xF8, 0xE0, 0x00, 0x00, 0x20, 0x3C, 0x3F, 0x23, 0x02, 0x27, 0x3F, 0x38}, /*"A",10*/

    {0x08, 0xF8, 0xF8, 0x88, 0x88, 0xF8, 0x70, 0x00, 0x20, 0x3F, 0x3F, 0x20, 0x20, 0x31, 0x1F, 0x0E}, /*"B",11*/

    {0xC0, 0xF0, 0x38, 0x08, 0x08, 0x08, 0x38, 0x38, 0x07, 0x1F, 0x38, 0x20, 0x20, 0x30, 0x18, 0x08}, /*"C",12*/

    {0x08, 0xF8, 0xF8, 0x08, 0x08, 0x18, 0xF0, 0xE0, 0x20, 0x3F, 0x3F, 0x20, 0x20, 0x30, 0x1F, 0x0F}, /*"D",13*/

    {0x08, 0xF8, 0xF8, 0x88, 0xE8, 0xE8, 0x18, 0x10, 0x20, 0x3F, 0x3F, 0x20, 0x23, 0x23, 0x38, 0x18}, /*"E",14*/

    {0x08, 0xF8, 0xF8, 0x88, 0xE8, 0xE8, 0x18, 0x10, 0x20, 0x3F, 0x3F, 0x20, 0x03, 0x03, 0x00, 0x00}, /*"F",15*/

    {0xC0, 0xF0, 0x38, 0x08, 0x08, 0x38, 0x38, 0x00, 0x07, 0x1F, 0x38, 0x20, 0x22, 0x3E, 0x1E, 0x02}, /*"G",16*/

    {0x08, 0xF8, 0xF8, 0x08, 0x00, 0x08, 0xF8, 0xF8, 0x20, 0x3F, 0x3F, 0x21, 0x01, 0x21, 0x3F, 0x3F}, /*"H",17*/

    {0x00, 0x08, 0x08, 0xF8, 0xF8, 0x08, 0x08, 0x00, 0x00, 0x20, 0x20, 0x3F, 0x3F, 0x20, 0x20, 0x00}, /*"I",18*/

    {0x00, 0x00, 0x08, 0x08, 0xF8, 0xF8, 0x08, 0x08, 0xC0, 0xC0, 0x80, 0x80, 0xFF, 0x7F, 0x00, 0x00}, /*"J",19*/

    {0x08, 0xF8, 0xF8, 0xC8, 0xE8, 0x38, 0x18, 0x08, 0x20, 0x3F, 0x3F, 0x21, 0x27, 0x3E, 0x38, 0x20}, /*"K",20*/

    {0x08, 0xF8, 0xF8, 0x08, 0x00, 0x00, 0x00, 0x00, 0x20, 0x3F, 0x3F, 0x20, 0x20, 0x20, 0x30, 0x30}, /*"L",21*/

    {0x08, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0x08, 0x20, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x20}, /*"M",22*/

    {0x08, 0xF8, 0xF8, 0xF0, 0xC0, 0x08, 0xF8, 0xF8, 0x20, 0x3F, 0x3F, 0x20, 0x07, 0x1F, 0x3F, 0x3F}, /*"N",23*/

    {0xE0, 0xF0, 0x18, 0x08, 0x08, 0x18, 0xF0, 0xE0, 0x0F, 0x1F, 0x30, 0x20, 0x20, 0x30, 0x1F, 0x0F}, /*"O",24*/

    {0x08, 0xF8, 0xF8, 0x08, 0x08, 0x08, 0xF8, 0xF0, 0x20, 0x3F, 0x3F, 0x21, 0x01, 0x01, 0x01, 0x00}, /*"P",25*/

    {0xE0, 0xF0, 0x18, 0x08, 0x08, 0x18, 0xF0, 0xE0, 0x0F, 0x1F, 0x38, 0x28, 0x38, 0x70, 0x5F, 0x4F}, /*"Q",26*/

    {0x08, 0xF8, 0xF8, 0x88, 0x88, 0x88, 0xF8, 0x70, 0x20, 0x3F, 0x3F, 0x20, 0x03, 0x0F, 0x3C, 0x30}, /*"R",27*/

    {0x00, 0x70, 0xF8, 0x88, 0x08, 0x08, 0x38, 0x38, 0x00, 0x38, 0x38, 0x21, 0x21, 0x23, 0x3E, 0x1C}, /*"S",28*/

    {0x18, 0x18, 0x08, 0xF8, 0xF8, 0x08, 0x18, 0x18, 0x00, 0x00, 0x20, 0x3F, 0x3F, 0x20, 0x00, 0x00}, /*"T",29*/

    {0x08, 0xF8, 0xF8, 0x08, 0x00, 0x08, 0xF8, 0xF8, 0x00, 0x1F, 0x3F, 0x20, 0x20, 0x20, 0x3F, 0x1F}, /*"U",30*/

    {0x08, 0x78, 0xF8, 0x88, 0x00, 0xC8, 0xF8, 0x38, 0x00, 0x00, 0x07, 0x3F, 0x3E, 0x0F, 0x01, 0x00}, /*"V",31*/

    {0x08, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0x08, 0x00, 0x03, 0x3F, 0x3F, 0x3F, 0x3F, 0x03, 0x00}, /*"W",32*/

    {0x08, 0x18, 0x78, 0xE8, 0x80, 0xE8, 0x78, 0x18, 0x20, 0x30, 0x3C, 0x2F, 0x03, 0x2F, 0x3C, 0x30}, /*"X",33*/

    {0x08, 0x38, 0xF8, 0xC8, 0xC8, 0xF8, 0x38, 0x08, 0x00, 0x00, 0x20, 0x3F, 0x3F, 0x20, 0x00, 0x00}, /*"Y",34*/

    {0x10, 0x18, 0x08, 0x08, 0xC8, 0xF8, 0x38, 0x08, 0x20, 0x38, 0x3E, 0x27, 0x21, 0x20, 0x38, 0x18}, /*"Z",35*/

};
Ssd1306 ssd1306;
Canvas *canvas;

void initSSD1306()
{
  ssd1306.initSSD1306();
}

void setup()
{

  canvas = new Ssd1306();
  Serial.begin(115200);
  pinMode(led, OUTPUT);
  initSSD1306();
  ssd1306.clearScreen();
}

void loop()
{

  // 画点
  canvas->drawPoint(20, 20, 0x01);
  // 画线
  // canvas->drawLine(0,0,128,64);
  // 画圆
  // canvas->drawCircle(64,32,30);
  // 画矩形
  // canvas->drawRect(20,20,50,30);
  // 画横线
  //  canvas->drawHLine(20,20,40);
  // 画竖线
  //  canvas->drawVLine(20,20,7);
  // canvas->drawHLine(20,20,50);

  // canvas->drawHLine(20,20,20);
  // canvas->drawVLine(20,20,20);
  // canvas->drawHLine(20,40,20);
  // canvas->drawVLine(40,20,20);

  /*   int startX = 0;
    for (size_t i = 0; i < 16; i++)
    {

      startX = i % 8;
      // Serial.print("startX=");
      // Serial.print(startX);
      // Serial.println();
      canvas->drawPoint(startX, i, a[i]);
    } */

  // 写入4个字符  8*16;

  int _startX = 0;
  int _startY = 0;
  for (size_t i = 0; i < 36; i++)
  {
    for (size_t j = 0; j < 16; j++)
    {
      _startX = 8 * (i % 16) + (j % 8);  //i/16控制第几个字符，j%8控制x坐标
      if (_startX == 127 && j == 15)
      {
        //  indexY +=1; //写满两页，跳下下一个页 page0page1 -> page2page3 类似这样，因为字符宽高是8*16，一个字符占两个页
        _startY = _startY + (1<<4);
        Serial.print("_startY = ");
        Serial.print(_startY);
        Serial.println();
      }
      canvas->drawPoint(_startX, _startY + j, chatArr[i][j]); // x 0~7 page0 0~7 page1 8~15 page0 8~15 page1
    }
  }

  // 0xF8
  // canvas->drawVLine(72,20,30);

  while (true)
  {
    digitalWrite(led, HIGH);
    delay(1000);
    digitalWrite(led, LOW);
    delay(1000);
  }
}